#include "MDViewModelEditorConfig.h"

#include "ClassViewerModule.h"
#include "GameplayTagsManager.h"
#include "Kismet2/KismetEditorUtilities.h"
#include "MDViewModelEditorModule.h"
#include "ViewModel/MDViewModelBlueprintBase.h"

UMDViewModelEditorConfig::UMDViewModelEditorConfig()
{
	CategoryName = TEXT("Plugins");
	SectionName = TEXT("View Model Editor");
}

void UMDViewModelEditorConfig::PostInitProperties()
{
	Super::PostInitProperties();

	UGameplayTagsManager::Get().CallOrRegister_OnDoneAddingNativeTagsDelegate(
		FSimpleMulticastDelegate::FDelegate::CreateWeakLambda(this, [this]() { ReloadConfig(); }));
}

void UMDViewModelEditorConfig::PostCDOContruct()
{
	Super::PostCDOContruct();

	UpdateViewModelBPDefaultEventNodes();
}

void UMDViewModelEditorConfig::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)
{
	Super::PostEditChangeProperty(PropertyChangedEvent);

	UpdateViewModelBPDefaultEventNodes();
}

EClassViewerNameTypeToDisplay UMDViewModelEditorConfig::GetNameTypeToDisplay() const
{
	switch (NameTypeToDisplay)
	{
	case EMDVMClassViewerNameTypeToDisplay::Dynamic:
		return EClassViewerNameTypeToDisplay::Dynamic;
	case EMDVMClassViewerNameTypeToDisplay::ClassName:
		return EClassViewerNameTypeToDisplay::ClassName;
	case EMDVMClassViewerNameTypeToDisplay::DisplayName:
		return EClassViewerNameTypeToDisplay::DisplayName;
	default:
		checkf(false, TEXT("Unhandled EMDVMClassViewerNameTypeToDisplay type"));
	}

	return EClassViewerNameTypeToDisplay::DisplayName;
}

void UMDViewModelEditorConfig::UpdateViewModelBPDefaultEventNodes() const
{
	if (FMDViewModelEditorModule* EditorModule = FModuleManager::GetModulePtr<FMDViewModelEditorModule>("MDViewModelEditor"))
	{
		if (bAutoCreateDefaultEvents)
		{
			FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(EditorModule, UMDViewModelBlueprintBase::StaticClass(), TEXT("BP_InitializeViewModel"));
			FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(EditorModule, UMDViewModelBlueprintBase::StaticClass(), TEXT("BP_ShutdownViewModel"));
		}
		else
		{
			FKismetEditorUtilities::UnregisterAutoBlueprintNodeCreation(EditorModule);
		}
	}
}
